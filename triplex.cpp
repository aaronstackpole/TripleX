#include <iostream>
#include <cassert>

auto constexpr MIN_LENGTH = 2;
auto constexpr MAX_LENGTH = 3;

auto constexpr MIN_DIFFICULTY = 2;
auto constexpr MAX_DIFFICULTY = 11;

class Difficulty
{
    int mDifficulty = 2;
public:
    void SetDifficulty(int difficulty)
    {
        assert(difficulty >= MIN_DIFFICULTY && difficulty <= MAX_DIFFICULTY);

        mDifficulty = difficulty;
    }

    void IncrementDifficulty()
    {
        mDifficulty++;

        if (mDifficulty >= MAX_DIFFICULTY) mDifficulty = MAX_DIFFICULTY;
    }

    void DecrementDifficulty()
    {
        mDifficulty--;

        if (mDifficulty <= MIN_DIFFICULTY) mDifficulty = MIN_DIFFICULTY;
    }

    int const & GetDifficulty()
    {
        return mDifficulty;
    }
};

// Codes and Guesses basic number interface
class INumbers
{
protected:
    virtual void UpdateSum() = 0;
    virtual void UpdateProduct() = 0;
public:
    virtual void SetNumbers(int numberA, int numberB, int numberC) = 0;
};

// To store codes generated by the game
class Codes : public INumbers
{
    int mCodeA = 2;
    int mCodeB = 3;
    int mCodeC = 4;

    int mCodeSum = mCodeA + mCodeB + mCodeC;
    int mCodeProduct = mCodeA * mCodeB * mCodeC;

    void UpdateSum() override
    {
        mCodeSum = mCodeA + mCodeB + mCodeC;
    }

    void UpdateProduct() override
    {
        mCodeProduct = mCodeA * mCodeB * mCodeC;
    }
public:
    void SetNumbers(int numberA, int numberB, int numberC) override
    {
        mCodeA = numberA;
        mCodeB = numberB;
        mCodeC = numberC;

        UpdateSum();
        UpdateProduct();
    }

    int const & GetCodeA()
    {
        return mCodeA;
    }

    int const & GetCodeB()
    {
        return mCodeB;
    }

    int const & GetCodeC()
    {
        return mCodeC;
    }

    int const & GetCodeSum()
    {
        return mCodeSum;
    }

    int const & GetCodeProduct()
    {
        return mCodeProduct;
    }
};

// To store guesses input by the user
class Guesses : public INumbers
{
    int mGuessA = 0;
    int mGuessB = 0;
    int mGuessC = 0;

    int mGuessSum = mGuessA + mGuessB + mGuessC; // = 0
    int mGuessProduct = mGuessA * mGuessB * mGuessC; // = 0

    void UpdateSum()
    {
        mGuessSum = mGuessA + mGuessB + mGuessC;
    }

    void UpdateProduct()
    {
        mGuessProduct = mGuessA * mGuessB * mGuessC;
    }
public:
    void SetNumbers(int numberA, int numberB, int numberC)
    {
        mGuessA = numberA;
        mGuessB = numberB;
        mGuessC = numberC;

        UpdateSum();
        UpdateProduct();
    }

    int const & GetGuessA()
    {
        return mGuessA;
    }

    int const & GetGuessB()
    {
        return mGuessB;
    }

    int const & GetGuessC()
    {
        return mGuessC;
    }

    int const & GetGuessSum()
    {
        return mGuessSum;
    }

    int const & GetGuessProduct()
    {
        return mGuessProduct;
    }
};

// Print welcome messages to the terminal
void PrintIntroduction(std::shared_ptr<Difficulty> & pDifficulty)
{
    std::wcout << L"You're a secret agent breaking into a level " << pDifficulty->GetDifficulty() << " secure server room..." << std::endl;
    std::wcout << L"You need to enter the correct codes to continue..." << std::endl;
    std::wcout << std::endl;
}

// Print code clues and input prompt
void PrintCluesAndPrompt(std::shared_ptr<Codes> & pCodes, std::shared_ptr<Difficulty> & pDifficulty)
{
    std::wcout << L"\tThere are 3 numbers in the code" << std::endl;
    std::wcout << L"\tThe product of the numbers is " << pCodes->GetCodeProduct() << std::endl;
    std::wcout << L"\tThe sum of the numbers is " << pCodes->GetCodeSum() << std::endl;
    std::wcout << std::endl;
    std::wcout << L"Enter your guesses (separated by spaces, i.e. 1 2 3): ";
}

// Output some debug messages about the captured input and calculations
void PrintGuessDebug(std::shared_ptr<Guesses> & pGuesses)
{
    std::wcout << L"DEBUG: You entered: " << pGuesses->GetGuessA() << " " << pGuesses->GetGuessB() << " " << pGuesses->GetGuessC() << std::endl;
    std::wcout << L"DEBUG: Your guess product is: " << pGuesses->GetGuessProduct() << std::endl;
    std::wcout << L"DEBUG: Your guess sum is: " << pGuesses->GetGuessSum() << std::endl;
}

bool PlayLevel(std::shared_ptr<Difficulty> & pDifficulty, std::shared_ptr<Codes> & pCodes, std::shared_ptr<Guesses> & pGuesses)
{
    PrintIntroduction(pDifficulty);

    PrintCluesAndPrompt(pCodes, pDifficulty);

    // Declare variables and capture user input
    int GuessA, GuessB, GuessC;
    std::wcin >> GuessA >> GuessB >> GuessC;

    // If failbit is set, set all the inputs to 0 before passing to SetNumbers()
    if (!std::wcin)
    {
        GuessA = GuessB = GuessC = 0;
    }

    // Copy input to Guesses class
    pGuesses->SetNumbers(GuessA, GuessB, GuessC);

    PrintGuessDebug(pGuesses);

    // Test if guess calculations are the same as code calculations
    if (pGuesses->GetGuessProduct() == pCodes->GetCodeProduct() && pGuesses->GetGuessSum() == pCodes->GetCodeSum())
    {
        std::wcout << L"You guessed correctly!" << std::endl;
        return true;
    }
    else
    {
        std::wcout << L"These are the wrong numbers! :(" << std::endl;
        return false;
    }    
}

int wmain(int argc, wchar_t argv[])
{
    // Instantiate data classes
    std::shared_ptr<Difficulty> pDifficulty = std::make_shared<Difficulty>();
    std::shared_ptr<Codes> pCodes = std::make_shared<Codes>();
    std::shared_ptr<Guesses> pGuesses = std::make_shared<Guesses>();
    
    while (true)
    {
        bool bLevelSuccess = PlayLevel(pDifficulty, pCodes, pGuesses);

        // Clear error and buffer
        std::wcin.clear();
        std::wcin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

        if (bLevelSuccess)
        {
            pDifficulty->IncrementDifficulty();
        }
        else
        {
            pDifficulty->DecrementDifficulty();
        }
    }

    return 0;
}
